;==================================================================================
; Contents of this file are copyright Grant Searle
;
; You have permission to use this for NON COMMERCIAL USE ONLY
; If you wish to use it elsewhere, please include an acknowledgement to myself.
;
; http://searle.hostei.com/grant/index.html
;
; eMail: home.micros01@btinternet.com
;
; If the above don't work, please perform an Internet search to see if I have
; updated the web page hosting service.
;
;==================================================================================

; Minimum 6850 ACIA interrupt driven serial I/O to run modified NASCOM Basic 4.7
; Full input buffering with incoming data hardware handshaking
; Handshake shows full before the buffer is totally filled to allow run-on from the sender

SER_BUFSIZE     .EQU     3FH
SER_FULLSIZE    .EQU     30H
SER_EMPTYSIZE   .EQU     5

RTS_HIGH        .EQU     0D6H
RTS_LOW         .EQU     096H

serBuf          .EQU     $2000
serInPtr        .EQU     serBuf+SER_BUFSIZE
serRdPtr        .EQU     serInPtr+2
serBufUsed      .EQU     serRdPtr+2
basicStarted    .EQU     serBufUsed+1
TEMPSTACK       .EQU     $20ED ; Top of BASIC line input buffer so is "free ram" when BASIC resets

CR              .EQU     0DH
LF              .EQU     0AH
CS              .EQU     0CH             ; Clear screen

                .ORG $0000
;------------------------------------------------------------------------------
; Reset

RST00           DI                       ;Disable interrupts
                JP       INIT            ;Initialize Hardware and go

;------------------------------------------------------------------------------
; TX a character over RS232 

                .ORG     0008H
RST08            JP      TXA

;------------------------------------------------------------------------------
; RX a character over RS232 Channel A [Console], hold here until char ready.

                .ORG 0010H
RST10            JP      RXA

;------------------------------------------------------------------------------
; Check serial status

                .ORG 0018H
RST18            JP      CKINCHAR

;------------------------------------------------------------------------------
; RST 38 - INTERRUPT VECTOR [ for IM 1 ]

                .ORG     0038H
RST38            JR      serialInt       

;------------------------------------------------------------------------------
serialInt:      PUSH     AF
                PUSH     HL

                IN       A,($80)
                AND      $01             ; Check if interupt due to read buffer full
                JR       Z,rts0          ; if not, ignore

                IN       A,($81)
                PUSH     AF
                LD       A,(serBufUsed)
                CP       SER_BUFSIZE     ; If full then ignore
                JR       NZ,notFull
                POP      AF
                JR       rts0

notFull:        LD       HL,(serInPtr)
                INC      HL
                LD       A,L             ; Only need to check low byte becasuse buffer<256 bytes
                CP       (serBuf+SER_BUFSIZE) & $FF
                JR       NZ, notWrap
                LD       HL,serBuf
notWrap:        LD       (serInPtr),HL
                POP      AF
                LD       (HL),A
                LD       A,(serBufUsed)
                INC      A
                LD       (serBufUsed),A
                CP       SER_FULLSIZE
                JR       C,rts0
                LD       A,RTS_HIGH
                OUT      ($80),A
rts0:           POP      HL
                POP      AF
                EI
                RETI

;------------------------------------------------------------------------------
RXA:
waitForChar:    LD       A,(serBufUsed)
                CP       $00
                JR       Z, waitForChar
                PUSH     HL
                LD       HL,(serRdPtr)
                INC      HL
                LD       A,L             ; Only need to check low byte becasuse buffer<256 bytes
                CP       (serBuf+SER_BUFSIZE) & $FF
                JR       NZ, notRdWrap
                LD       HL,serBuf
notRdWrap:      DI
                LD       (serRdPtr),HL
                LD       A,(serBufUsed)
                DEC      A
                LD       (serBufUsed),A
                CP       SER_EMPTYSIZE
                JR       NC,rts1
                LD       A,RTS_LOW
                OUT      ($80),A
rts1:
                LD       A,(HL)
                EI
                POP      HL
                RET                      ; Char ready in A

;------------------------------------------------------------------------------
TXA:            PUSH     AF              ; Store character
conout1:        IN       A,($80)         ; Status byte       
                BIT      1,A             ; Set Zero flag if still transmitting character       
                JR       Z,conout1       ; Loop until flag signals ready
                POP      AF              ; Retrieve character
                OUT      ($81),A         ; Output the character
                RET

;------------------------------------------------------------------------------
CKINCHAR        LD       A,(serBufUsed)
                CP       $0
                RET

PRINT:          LD       A,(HL)          ; Get character
                OR       A               ; Is it $00 ?
                RET      Z               ; Then RETurn on terminator
                RST      08H             ; Print it
                INC      HL              ; Next Character
                JR       PRINT           ; Continue until $00
                RET
;------------------------------------------------------------------------------
INIT:
               LD        HL,TEMPSTACK    ; Temp stack
               LD        SP,HL           ; Set up a temporary stack
               LD        HL,serBuf
               LD        (serInPtr),HL
               LD        (serRdPtr),HL
               XOR       A               ;0 to accumulator
               LD        (serBufUsed),A
               LD        A,RTS_LOW
               OUT       ($80),A         ; Initialise ACIA
               IM        1
               EI
               LD        HL,SIGNON1      ; Sign-on message
               CALL      PRINT           ; Output string
               LD        A,(basicStarted); Check the BASIC STARTED flag
               CP        'Y'             ; to see if this is power-up
               JR        NZ,COLDSTART    ; If not BASIC started then always do cold start
               LD        HL,SIGNON2      ; Cold/warm message
               CALL      PRINT           ; Output string
CORW:
               CALL      RXA
               AND       %11011111       ; lower to uppercase
               CP        'C'
               JR        NZ, CHECKWARM
               RST       08H
               LD        A,$0D
               RST       08H
               LD        A,$0A
               RST       08H
COLDSTART:     LD        A,'Y'           ; Set the BASIC STARTED flag
               LD        (basicStarted),A
               JP        $0150           ; Start BASIC COLD
CHECKWARM:
               CP        'W'
               JR        NZ, CORW
               RST       08H
               LD        A,$0D
               RST       08H
               LD        A,$0A
               RST       08H
               JP        $0153           ; Start BASIC WARM
              
SIGNON1:       .BYTE     CS
               .BYTE     "Z80 SBC By Grant Searle",CR,LF,0
SIGNON2:       .BYTE     CR,LF
               .BYTE     "Cold or warm start (C or W)? ",0
              
.END




////////////////////////////////////////////////

//mint 2
// Constants
#3F SER_BUFSIZE !  // Set serial buffer size to 63 (3F in hex)
#30 SER_FULLSIZE !  // Set full size threshold to 48 (30 in hex)
5 SER_EMPTYSIZE !  // Set empty size threshold to 5

#D6 RTS_HIGH !  // Set RTS high value to D6 hex
#96 RTS_LOW !  // Set RTS low value to 96 hex

#2000 serBuf !  // Set serial buffer address to 2000 hex
serBuf SER_BUFSIZE + serInPtr !  // Calculate and set serInPtr address
serInPtr 2 + serRdPtr !  // Calculate and set serRdPtr address
serRdPtr 2 + serBufUsed !  // Calculate and set serBufUsed address
serBufUsed 1 + basicStarted !  // Calculate and set basicStarted address
#20ED TEMPSTACK !  // Set temporary stack address to 20ED hex

#D CR !  // Set carriage return ASCII value
#A LF !  // Set line feed ASCII value
#C CS !  // Set clear screen ASCII value

// Initialize
:INIT
  TEMPSTACK SP !  // Set stack pointer to TEMPSTACK
  serBuf serInPtr !  // Initialize serInPtr
  serBuf serRdPtr !  // Initialize serRdPtr
  0 serBufUsed !  // Initialize serBufUsed to 0
  RTS_LOW #80 /O  // Output RTS_LOW to port 80 hex
  /T INT !  // Enable interrupts
  SIGNON1 PRINT  // Print SIGNON1 message
  basicStarted /K  // Get value of basicStarted
  `Y` = (  // If basicStarted equals 'Y'
    SIGNON2 PRINT  // Print SIGNON2 message
    CORW  // Call CORW function
  ) /E (  // Else
    COLDSTART  // Call COLDSTART function
  )
;

// Print function
:PRINT
  /U (  // Unlimited loop
    " 0 = /W  // Break if character is 0
    /C  // Print character
    1+  // Move to next character
  )
;

// Cold/Warm start choice
:CORW
  /U (  // Unlimited loop
    /K  // Get keyboard input
    #DF &  // Convert to uppercase (AND with 11011111 binary)
    " `C` = (  // If input is 'C'
      /C CR /C LF /C  // Print newline
      COLDSTART  // Call COLDSTART
    ) /E (  // Else
      `W` = (  // If input is 'W'
        /C CR /C LF /C  // Print newline
        #0153 /X  // Execute code at 0153 hex (BASIC warm start)
      )
    )
  )
;

// Cold start function
:COLDSTART
  `Y` basicStarted !  // Set basicStarted flag to 'Y'
  #0150 /X  // Execute code at 0150 hex (BASIC cold start)
;

// Serial interrupt handler
:serialInt
  #80 /I 1 & (  // Check if interrupt is due to read buffer full
    #81 /I  // Read character from port 81 hex
    serBufUsed / SER_BUFSIZE < (  // If buffer is not full
      serInPtr / "  // Duplicate current serInPtr
      1+ #FF &  // Increment and mask with FF
      (serBuf SER_BUFSIZE +) #FF & = (  // If at end of buffer
        serBuf  // Wrap to start of buffer
      )
      serInPtr !  // Update serInPtr
      serInPtr / !  // Store character in buffer
      serBufUsed / 1+ serBufUsed !  // Increment serBufUsed
      SER_FULLSIZE = (  // If buffer is full
        RTS_HIGH #80 /O  // Set RTS high
      )
    )
  )
;

// Receive character function
:RXA
  /U (  // Unlimited loop
    serBufUsed / 0 > /W  // Wait until buffer has data
    serRdPtr / "  // Duplicate current serRdPtr
    1+ #FF &  // Increment and mask with FF
    (serBuf SER_BUFSIZE +) #FF & = (  // If at end of buffer
      serBuf  // Wrap to start of buffer
    )
    serRdPtr !  // Update serRdPtr
    serBufUsed / 1- serBufUsed !  // Decrement serBufUsed
    SER_EMPTYSIZE = (  // If buffer is near empty
      RTS_LOW #80 /O  // Set RTS low
    )
    serRdPtr / /K  // Return character from buffer
  )
;

// Transmit character function
:TXA
  /U (  // Unlimited loop
    #80 /I 2 & /W  // Wait until transmit buffer is empty
    #81 /O  // Output character to port 81 hex
  )
;

// Check for character function
:CKINCHAR
  serBufUsed / 0 >  // Return true if buffer has data
;

// Sign-on messages
:SIGNON1
  CS /C  // Clear screen
  `Z80 SBC By Grant Searle` CR /C LF /C
;

:SIGNON2
  CR /C LF /C
  `Cold or warm start (C or W)? `
;

// Main program
INIT  // Call initialization function
/////////////////////////////////////////////////////////////////
